# Singleton: Administrador
class Administrador:
    _instancia = None

    def __new__(cls, id, nombre, correo):
        if cls._instancia is None:
            cls._instancia = super().__new__(cls)
            cls._instancia.id = id
            cls._instancia.nombre = nombre
            cls._instancia.correo = correo
        return cls._instancia

    def gestionar_servicios(self):
        print("Gestionando servicios...")

    def gestionar_usuarios(self):
        print("Gestionando usuarios...")

    def generar_reportes(self):
        print("Generando reportes...")

    # MÃ©todo actualizar para que funcione como observador
    def actualizar(self, mensaje):
        print(f"ðŸ“¢ NotificaciÃ³n para el Administrador: {mensaje}")

# Observer: Cliente y Administrador observan cambios en Cita
class Observador:
    def actualizar(self, mensaje):
        pass

class Cliente(Observador):
    def __init__(self, id, nombre, correo, telefono):
        self.id = id
        self.nombre = nombre
        self.correo = correo
        self.telefono = telefono

    def iniciar_sesion(self):
        print(f"{self.nombre} ha iniciado sesiÃ³n.")

    def reservar_cita(self):
        print(f"{self.nombre} ha reservado una cita.")

    def cancelar_cita(self):
        print(f"{self.nombre} ha cancelado una cita.")

    def ver_historial_citas(self):
        print(f"Mostrando historial de citas de {self.nombre}.")

    def actualizar(self, mensaje):
        print(f"ðŸ”” NotificaciÃ³n para {self.nombre}: {mensaje}")

# Sujeto: Cita
class Cita:
    def __init__(self, id, fecha, hora):
        self.id = id
        self.fecha = fecha
        self.hora = hora
        self.estado = "Pendiente"
        self.observadores = []

    def agregar_observador(self, observador):
        self.observadores.append(observador)

    def eliminar_observador(self, observador):
        self.observadores.remove(observador)

    def notificar_observadores(self):
        mensaje = f"La cita {self.id} ha cambiado de estado a {self.estado}."
        for observador in self.observadores:
            observador.actualizar(mensaje)

    def confirmar_cita(self):
        self.estado = "Confirmada"
        self.notificar_observadores()

    def cancelar_cita(self):
        self.estado = "Cancelada"
        self.notificar_observadores()

# Ejemplo de uso
admin = Administrador(1, "Admin1", "admin@example.com")
cliente1 = Cliente(101, "Juan PÃ©rez", "juan@example.com", "555-1234")

cita1 = Cita(1, "2025-03-01", "10:00 AM")
cita1.agregar_observador(cliente1)
cita1.agregar_observador(admin)  # El administrador tambiÃ©n puede observar

print("ðŸ“… Reservando una cita...")
cita1.confirmar_cita()  # NotificarÃ¡ a los observadores
print("\nðŸš« Cancelando la cita...")
cita1.cancelar_cita()  # No
